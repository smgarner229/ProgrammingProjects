TODOS:

-> Make a consistent naming scheme for struct type, storage type, and operation type of angles
-> Separate print to make cleaner (potentially move macro to cpp?)
-> Cleanup Print statements to make output more clean
-> Make helper functions to loop over atoms for calculations
    -> Pseudocode:
        call_loop_structure(molecule_to_loop_through,function_to_apply,location_to_store_data)
-> Decide on storing distances versus calculating on the fly?
-> Pretty input / output
-> Turn main function into driver which calls some "Geometry Analysis" routine
-> Configure CMake to take print macro options
-> Do the final unit conversions
-> Store the resulting elements of diagonalizing the inerial tensor
-> Make matrix diagonalizing take only the upper diagonal (ie move from dgeev to dsyev)
-> Breakout molecule, particle, point into separate class files
-> Make more elegant for parsing how to solve the different questions (ie, make a single executable for Q1&Q2 that can be run for either or both)
-> Conversion for lower triangle to full matrix is almost working, but not quite perfect.
    -> Best practice would be to just stick with using the lower triangle, but for getting it working I'm going to stick with what I know

